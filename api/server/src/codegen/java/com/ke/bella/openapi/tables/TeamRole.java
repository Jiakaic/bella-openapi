/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.openapi.tables;


import com.ke.bella.openapi.DefaultSchema;
import com.ke.bella.openapi.Keys;
import com.ke.bella.openapi.tables.records.TeamRoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 团队角色
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamRole extends TableImpl<TeamRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>team_role</code>
     */
    public static final TeamRole TEAM_ROLE = new TeamRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamRoleRecord> getRecordType() {
        return TeamRoleRecord.class;
    }

    /**
     * The column <code>team_role.id</code>. 主键
     */
    public final TableField<TeamRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>team_role.team_code</code>. 团队编码
     */
    public final TableField<TeamRoleRecord, String> TEAM_CODE = createField(DSL.name("team_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "团队编码");

    /**
     * The column <code>team_role.role_code</code>. 角色编码
     */
    public final TableField<TeamRoleRecord, String> ROLE_CODE = createField(DSL.name("role_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "角色编码");

    /**
     * The column <code>team_role.role_name</code>. 角色名称
     */
    public final TableField<TeamRoleRecord, String> ROLE_NAME = createField(DSL.name("role_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "角色名称");

    /**
     * The column <code>team_role.role_desc</code>. 角色描述
     */
    public final TableField<TeamRoleRecord, String> ROLE_DESC = createField(DSL.name("role_desc"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "角色描述");

    /**
     * The column <code>team_role.role_type</code>. 角色类型(1系统内置，2自定义)
     */
    public final TableField<TeamRoleRecord, Byte> ROLE_TYPE = createField(DSL.name("role_type"), SQLDataType.TINYINT.defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "角色类型(1系统内置，2自定义)");

    /**
     * The column <code>team_role.status</code>. 删除状态(0未删除，-1已删除)
     */
    public final TableField<TeamRoleRecord, Byte> STATUS = createField(DSL.name("status"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "删除状态(0未删除，-1已删除)");

    /**
     * The column <code>team_role.ctime</code>. 创建时间
     */
    public final TableField<TeamRoleRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>team_role.mtime</code>. 最后一次更新时间
     */
    public final TableField<TeamRoleRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "最后一次更新时间");

    /**
     * The column <code>team_role.cuid</code>. 创建人系统号
     */
    public final TableField<TeamRoleRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建人系统号");

    /**
     * The column <code>team_role.muid</code>. 最后一次更新人系统号
     */
    public final TableField<TeamRoleRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "最后一次更新人系统号");

    /**
     * The column <code>team_role.cu_name</code>. 团队创建人姓名
     */
    public final TableField<TeamRoleRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "团队创建人姓名");

    /**
     * The column <code>team_role.mu_name</code>. 团队最后一次更新人姓名
     */
    public final TableField<TeamRoleRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "团队最后一次更新人姓名");

    private TeamRole(Name alias, Table<TeamRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamRole(Name alias, Table<TeamRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("团队角色"), TableOptions.table());
    }

    /**
     * Create an aliased <code>team_role</code> table reference
     */
    public TeamRole(String alias) {
        this(DSL.name(alias), TEAM_ROLE);
    }

    /**
     * Create an aliased <code>team_role</code> table reference
     */
    public TeamRole(Name alias) {
        this(alias, TEAM_ROLE);
    }

    /**
     * Create a <code>team_role</code> table reference
     */
    public TeamRole() {
        this(DSL.name("team_role"), null);
    }

    public <O extends Record> TeamRole(Table<O> child, ForeignKey<O, TeamRoleRecord> key) {
        super(child, key, TEAM_ROLE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TeamRoleRecord, Long> getIdentity() {
        return (Identity<TeamRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TeamRoleRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamRoleRecord>>asList(Keys.KEY_TEAM_ROLE_PRIMARY, Keys.KEY_TEAM_ROLE_UNIQ_IDX_TEAM_ROLE_CODE);
    }

    @Override
    public TeamRole as(String alias) {
        return new TeamRole(DSL.name(alias), this);
    }

    @Override
    public TeamRole as(Name alias) {
        return new TeamRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamRole rename(String name) {
        return new TeamRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamRole rename(Name name) {
        return new TeamRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, String, Byte, Byte, LocalDateTime, LocalDateTime, Long, Long, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
