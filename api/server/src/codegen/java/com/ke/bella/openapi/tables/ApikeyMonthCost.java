/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.openapi.tables;


import com.ke.bella.openapi.DefaultSchema;
import com.ke.bella.openapi.Indexes;
import com.ke.bella.openapi.Keys;
import com.ke.bella.openapi.tables.records.ApikeyMonthCostRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ak月花费
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApikeyMonthCost extends TableImpl<ApikeyMonthCostRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apikey_month_cost</code>
     */
    public static final ApikeyMonthCost APIKEY_MONTH_COST = new ApikeyMonthCost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyMonthCostRecord> getRecordType() {
        return ApikeyMonthCostRecord.class;
    }

    /**
     * The column <code>apikey_month_cost.id</code>. 主键ID
     */
    public final TableField<ApikeyMonthCostRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>apikey_month_cost.ak_code</code>. ak编码
     */
    public final TableField<ApikeyMonthCostRecord, String> AK_CODE = createField(DSL.name("ak_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "ak编码");

    /**
     * The column <code>apikey_month_cost.month</code>. 月份
     */
    public final TableField<ApikeyMonthCostRecord, String> MONTH = createField(DSL.name("month"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "月份");

    /**
     * The column <code>apikey_month_cost.amount</code>. 开销（分）
     */
    public final TableField<ApikeyMonthCostRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(12, 4).nullable(false).defaultValue(DSL.inline("0.0000", SQLDataType.DECIMAL)), this, "开销（分）");

    /**
     * The column <code>apikey_month_cost.ctime</code>.
     */
    public final TableField<ApikeyMonthCostRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>apikey_month_cost.mtime</code>.
     */
    public final TableField<ApikeyMonthCostRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ApikeyMonthCost(Name alias, Table<ApikeyMonthCostRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApikeyMonthCost(Name alias, Table<ApikeyMonthCostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ak月花费"), TableOptions.table());
    }

    /**
     * Create an aliased <code>apikey_month_cost</code> table reference
     */
    public ApikeyMonthCost(String alias) {
        this(DSL.name(alias), APIKEY_MONTH_COST);
    }

    /**
     * Create an aliased <code>apikey_month_cost</code> table reference
     */
    public ApikeyMonthCost(Name alias) {
        this(alias, APIKEY_MONTH_COST);
    }

    /**
     * Create a <code>apikey_month_cost</code> table reference
     */
    public ApikeyMonthCost() {
        this(DSL.name("apikey_month_cost"), null);
    }

    public <O extends Record> ApikeyMonthCost(Table<O> child, ForeignKey<O, ApikeyMonthCostRecord> key) {
        super(child, key, APIKEY_MONTH_COST);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APIKEY_MONTH_COST_IDX_MONTH);
    }

    @Override
    public Identity<ApikeyMonthCostRecord, Long> getIdentity() {
        return (Identity<ApikeyMonthCostRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApikeyMonthCostRecord> getPrimaryKey() {
        return Keys.KEY_APIKEY_MONTH_COST_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApikeyMonthCostRecord>> getKeys() {
        return Arrays.<UniqueKey<ApikeyMonthCostRecord>>asList(Keys.KEY_APIKEY_MONTH_COST_PRIMARY, Keys.KEY_APIKEY_MONTH_COST_UNIQ_IDX_AK_CODE_MONTH);
    }

    @Override
    public ApikeyMonthCost as(String alias) {
        return new ApikeyMonthCost(DSL.name(alias), this);
    }

    @Override
    public ApikeyMonthCost as(Name alias) {
        return new ApikeyMonthCost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeyMonthCost rename(String name) {
        return new ApikeyMonthCost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApikeyMonthCost rename(Name name) {
        return new ApikeyMonthCost(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, BigDecimal, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
