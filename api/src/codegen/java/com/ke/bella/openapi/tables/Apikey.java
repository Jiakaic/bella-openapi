/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.openapi.tables;


import com.ke.bella.openapi.DefaultSchema;
import com.ke.bella.openapi.Indexes;
import com.ke.bella.openapi.Keys;
import com.ke.bella.openapi.tables.records.ApikeyRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ak
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apikey extends TableImpl<ApikeyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>apikey</code>
     */
    public static final Apikey APIKEY = new Apikey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyRecord> getRecordType() {
        return ApikeyRecord.class;
    }

    /**
     * The column <code>apikey.id</code>. 主键ID
     */
    public final TableField<ApikeyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>apikey.code</code>. ak编码
     */
    public final TableField<ApikeyRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "ak编码");

    /**
     * The column <code>apikey.ak_sha</code>. 加密ak
     */
    public final TableField<ApikeyRecord, String> AK_SHA = createField(DSL.name("ak_sha"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "加密ak");

    /**
     * The column <code>apikey.ak_display</code>. 脱敏ak
     */
    public final TableField<ApikeyRecord, String> AK_DISPLAY = createField(DSL.name("ak_display"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "脱敏ak");

    /**
     * The column <code>apikey.name</code>. 名字
     */
    public final TableField<ApikeyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "名字");

    /**
     * The column <code>apikey.parent_code</code>. 父ak
     */
    public final TableField<ApikeyRecord, String> PARENT_CODE = createField(DSL.name("parent_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "父ak");

    /**
     * The column <code>apikey.out_entity_code</code>. 授权实体code
     */
    public final TableField<ApikeyRecord, String> OUT_ENTITY_CODE = createField(DSL.name("out_entity_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "授权实体code");

    /**
     * The column <code>apikey.owner_type</code>. 所有者类型（系统/组织/个人）
     */
    public final TableField<ApikeyRecord, String> OWNER_TYPE = createField(DSL.name("owner_type"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "所有者类型（系统/组织/个人）");

    /**
     * The column <code>apikey.owner_code</code>. 所有者系统号
     */
    public final TableField<ApikeyRecord, String> OWNER_CODE = createField(DSL.name("owner_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "所有者系统号");

    /**
     * The column <code>apikey.owner_name</code>. 所有者名称
     */
    public final TableField<ApikeyRecord, String> OWNER_NAME = createField(DSL.name("owner_name"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "所有者名称");

    /**
     * The column <code>apikey.role_code</code>. 角色编码
     */
    public final TableField<ApikeyRecord, String> ROLE_CODE = createField(DSL.name("role_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "角色编码");

    /**
     * The column <code>apikey.certify_code</code>. 安全认证码
     */
    public final TableField<ApikeyRecord, String> CERTIFY_CODE = createField(DSL.name("certify_code"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "安全认证码");

    /**
     * The column <code>apikey.safety_level</code>. 安全等级
     */
    public final TableField<ApikeyRecord, Byte> SAFETY_LEVEL = createField(DSL.name("safety_level"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "安全等级");

    /**
     * The column <code>apikey.month_quota</code>. 每月额度
     */
    public final TableField<ApikeyRecord, BigDecimal> MONTH_QUOTA = createField(DSL.name("month_quota"), SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(DSL.inline("0.00", SQLDataType.DECIMAL)), this, "每月额度");

    /**
     * The column <code>apikey.status</code>. 状态(active/inactive)
     */
    public final TableField<ApikeyRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("active", SQLDataType.VARCHAR)), this, "状态(active/inactive)");

    /**
     * The column <code>apikey.cuid</code>. 创建人id
     */
    public final TableField<ApikeyRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建人id");

    /**
     * The column <code>apikey.cu_name</code>. 创建人姓名
     */
    public final TableField<ApikeyRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建人姓名");

    /**
     * The column <code>apikey.muid</code>. 编辑人id
     */
    public final TableField<ApikeyRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "编辑人id");

    /**
     * The column <code>apikey.mu_name</code>. 编辑人姓名
     */
    public final TableField<ApikeyRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "编辑人姓名");

    /**
     * The column <code>apikey.ctime</code>.
     */
    public final TableField<ApikeyRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>apikey.mtime</code>.
     */
    public final TableField<ApikeyRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private Apikey(Name alias, Table<ApikeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apikey(Name alias, Table<ApikeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ak"), TableOptions.table());
    }

    /**
     * Create an aliased <code>apikey</code> table reference
     */
    public Apikey(String alias) {
        this(DSL.name(alias), APIKEY);
    }

    /**
     * Create an aliased <code>apikey</code> table reference
     */
    public Apikey(Name alias) {
        this(alias, APIKEY);
    }

    /**
     * Create a <code>apikey</code> table reference
     */
    public Apikey() {
        this(DSL.name("apikey"), null);
    }

    public <O extends Record> Apikey(Table<O> child, ForeignKey<O, ApikeyRecord> key) {
        super(child, key, APIKEY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APIKEY_IDX_OWNER_TYPE_CODE, Indexes.APIKEY_IDX_PARENT_CODE_USER_ID);
    }

    @Override
    public Identity<ApikeyRecord, Long> getIdentity() {
        return (Identity<ApikeyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApikeyRecord> getPrimaryKey() {
        return Keys.KEY_APIKEY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApikeyRecord>> getKeys() {
        return Arrays.<UniqueKey<ApikeyRecord>>asList(Keys.KEY_APIKEY_PRIMARY, Keys.KEY_APIKEY_UNIQ_IDX_CODE, Keys.KEY_APIKEY_UNIQ_IDX_AK_SHA);
    }

    @Override
    public Apikey as(String alias) {
        return new Apikey(DSL.name(alias), this);
    }

    @Override
    public Apikey as(Name alias) {
        return new Apikey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(String name) {
        return new Apikey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Name name) {
        return new Apikey(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Long, String, String, String, String, String, String, String, String, String, String, String, Byte, BigDecimal, String, Long, String, Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
