/*
 * This file is generated by jOOQ.
 */
package com.ke.bella.openapi.tables;


import com.ke.bella.openapi.DefaultSchema;
import com.ke.bella.openapi.Keys;
import com.ke.bella.openapi.tables.records.ApiKeyRoleRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * ak角色
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApiKeyRole extends TableImpl<ApiKeyRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>api_key_role</code>
     */
    public static final ApiKeyRole API_KEY_ROLE = new ApiKeyRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApiKeyRoleRecord> getRecordType() {
        return ApiKeyRoleRecord.class;
    }

    /**
     * The column <code>api_key_role.id</code>. 主键ID
     */
    public final TableField<ApiKeyRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>api_key_role.role_code</code>. ak编码
     */
    public final TableField<ApiKeyRoleRecord, String> ROLE_CODE = createField(DSL.name("role_code"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "ak编码");

    /**
     * The column <code>api_key_role.path</code>. 授权的path
     */
    public final TableField<ApiKeyRoleRecord, String> PATH = createField(DSL.name("path"), SQLDataType.CLOB.nullable(false), this, "授权的path");

    /**
     * The column <code>api_key_role.cuid</code>. 创建人id
     */
    public final TableField<ApiKeyRoleRecord, Long> CUID = createField(DSL.name("cuid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "创建人id");

    /**
     * The column <code>api_key_role.cu_name</code>. 创建人姓名
     */
    public final TableField<ApiKeyRoleRecord, String> CU_NAME = createField(DSL.name("cu_name"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "创建人姓名");

    /**
     * The column <code>api_key_role.muid</code>. 编辑人id
     */
    public final TableField<ApiKeyRoleRecord, Long> MUID = createField(DSL.name("muid"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "编辑人id");

    /**
     * The column <code>api_key_role.mu_name</code>. 编辑人姓名
     */
    public final TableField<ApiKeyRoleRecord, String> MU_NAME = createField(DSL.name("mu_name"), SQLDataType.VARCHAR(16).nullable(false).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "编辑人姓名");

    /**
     * The column <code>api_key_role.ctime</code>.
     */
    public final TableField<ApiKeyRoleRecord, LocalDateTime> CTIME = createField(DSL.name("ctime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>api_key_role.mtime</code>.
     */
    public final TableField<ApiKeyRoleRecord, LocalDateTime> MTIME = createField(DSL.name("mtime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ApiKeyRole(Name alias, Table<ApiKeyRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private ApiKeyRole(Name alias, Table<ApiKeyRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ak角色"), TableOptions.table());
    }

    /**
     * Create an aliased <code>api_key_role</code> table reference
     */
    public ApiKeyRole(String alias) {
        this(DSL.name(alias), API_KEY_ROLE);
    }

    /**
     * Create an aliased <code>api_key_role</code> table reference
     */
    public ApiKeyRole(Name alias) {
        this(alias, API_KEY_ROLE);
    }

    /**
     * Create a <code>api_key_role</code> table reference
     */
    public ApiKeyRole() {
        this(DSL.name("api_key_role"), null);
    }

    public <O extends Record> ApiKeyRole(Table<O> child, ForeignKey<O, ApiKeyRoleRecord> key) {
        super(child, key, API_KEY_ROLE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ApiKeyRoleRecord, Long> getIdentity() {
        return (Identity<ApiKeyRoleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ApiKeyRoleRecord> getPrimaryKey() {
        return Keys.KEY_API_KEY_ROLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<ApiKeyRoleRecord>> getKeys() {
        return Arrays.<UniqueKey<ApiKeyRoleRecord>>asList(Keys.KEY_API_KEY_ROLE_PRIMARY, Keys.KEY_API_KEY_ROLE_UNIQ_IDX_ROLE_CODE);
    }

    @Override
    public ApiKeyRole as(String alias) {
        return new ApiKeyRole(DSL.name(alias), this);
    }

    @Override
    public ApiKeyRole as(Name alias) {
        return new ApiKeyRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeyRole rename(String name) {
        return new ApiKeyRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ApiKeyRole rename(Name name) {
        return new ApiKeyRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, Long, String, Long, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
